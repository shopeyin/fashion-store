{"version":3,"sources":["components/paystack-button/paystack-button.component.jsx","components/checkout-item/CheckOut.component.jsx","pages/checkout/CheckoutPage.component.jsx"],"names":["connect","state","currentUser","user","price","cartItems","insertItems","successMsg","name","displayName","amount","email","useState","phone","componentProps","metadata","publicKey","text","onSuccess","e","onClose","console","log","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","className","src","alt","width","onClick","id","mapStateToProps","createStructuredSelector","selectCartItems","total","selectCartTotal","selectCurrentUser","withRouter","history","style","textAlign","scope","map","key","push","firebase","firestore","collection","doc","add","items","createdAt","Date"],"mappings":"6PAwCA,IAIeA,eAJS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAME,KAAKD,eAGXF,EAtCf,YAMI,IALFI,EAKC,EALDA,MAEAF,GAGC,EAJDG,UAIC,EAHDH,aAEAI,GACC,EAFDC,WAEC,EADDD,aAEME,EAAON,EAAcA,EAAYO,YAAc,GAE/CC,EAAiB,IAARN,EACTO,EAAQT,EAAcA,EAAYS,MAAQ,GAJ/C,EAOyBC,mBAAS,IAPlC,mBAOMC,EAPN,KAQKC,GARL,KAQsB,CACrBH,QACAD,SACAK,SAAU,CACRP,OACAK,SAEFG,UAbgB,mDAchBC,KAAM,UACNC,UAAW,SAACC,GAAD,OAAOb,KAElBc,QAAS,kBAAMC,QAAQC,IAAI,2BAE7B,OACE,6BACE,kBAAC,IAAmBR,O,QCWXd,G,OAAAA,YAAQ,MANI,SAACuB,GAAD,MAAe,CACxCC,UAAW,SAACC,GAAD,OAAUF,EAASG,YAAkBD,KAChDE,QAAS,SAACF,GAAD,OAAUF,EAASI,YAAQF,KACpCG,WAAY,SAACH,GAAD,OAAUF,EAASK,YAAWH,QAG7BzB,EArCM,SAAC,GAAkD,IAAhD6B,EAA+C,EAA/CA,SAAUL,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAE5CpB,EAAoCqB,EAApCrB,KAAMsB,EAA8BD,EAA9BC,SAAU1B,EAAoByB,EAApBzB,MAAO2B,EAAaF,EAAbE,SAC/B,OACE,4BACE,wBAAIC,UAAU,oBACX,IACD,yBAAKC,IAAKH,EAAUI,IAAI,OAAOF,UAAU,YAAYG,MAAM,SAE7D,wBAAIH,UAAU,QAAQxB,GACtB,wBAAIwB,UAAU,YACZ,0BAAMA,UAAU,QAAQI,QAAS,kBAAMR,EAAWC,KAAlD,UAGA,0BAAMG,UAAU,SAASD,GACzB,0BAAMC,UAAU,QAAQI,QAAS,kBAAMT,EAAQE,KAA/C,WAIF,wBAAIG,UAAU,SAAS5B,GACvB,wBACEiC,GAAG,SACHL,UAAU,iBACVI,QAAS,kBAAMZ,EAAUK,KAH3B,e,QC6CAS,EAAkBC,YAAyB,CAC/ClC,UAAWmC,IACXC,MAAOC,IACPvC,KAAMwC,MAGOC,sBAAW5C,YAAQsC,EAARtC,EAjEL,SAAC,GAAyC,IAAvCK,EAAsC,EAAtCA,UAAWoC,EAA2B,EAA3BA,MAAOI,EAAoB,EAApBA,QAAS1C,EAAW,EAAXA,KAiBjD,OACE,yBAAK6B,UAAU,kBACb,yBAAKA,UAAU,oCACb,2BAAOA,UAAU,QAAQc,MAAO,CAAEC,UAAW,WAC3C,+BACE,4BACE,wBAAIC,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,YAGJ,+BACG3C,EAAU4C,KAAI,SAACpB,GAAD,OACb,kBAAC,EAAD,CAAUqB,IAAKrB,EAASQ,GAAIR,SAAUA,UAK9C,yBAAKG,UAAU,oBACb,yBAAKA,UAAU,SACb,6CAAoBS,IAEtB,yBAAKT,UAAU,iBAAf,2DAEE,6BAFF,wCAKA,yBAAKA,UAAU,eACb,kBAAC,EAAD,CACE5B,MAAOqC,EACPpC,UAAWA,EACXE,WArCS,WACjBsC,EAAQM,KAAK,WAqCL7C,YAlDU,WAClBe,QAAQC,IAAI,aACD8B,IAASC,YAEjBC,WAAW,SAASC,IAAIpD,EAAKkC,IAAIiB,WAAW,aAAaE,IAAI,CAC9DC,MAAOpD,EACPK,OAAQ+B,EACRiB,UAAW,IAAIC,OAEjBd,EAAQM,KAAK","file":"static/js/6.7b734481.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { PaystackButton } from \"react-paystack\";\r\nimport axios from \"axios\";\r\n\r\nfunction PaystackBtn({\r\n  price,\r\n  cartItems,\r\n  currentUser,\r\n  successMsg,\r\n  insertItems,\r\n}) {\r\n  const name = currentUser ? currentUser.displayName : \"\";\r\n  const publicKey = \"pk_test_036bde196ceb061a7dd57be49a7c7ee913095802\";\r\n  const amount = price * 100;\r\n  const email = currentUser ? currentUser.email : \"\";\r\n  //const email = \"oladimejicoder@gmail.com\";\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n  const componentProps = {\r\n    email,\r\n    amount,\r\n    metadata: {\r\n      name,\r\n      phone,\r\n    },\r\n    publicKey,\r\n    text: \"Pay Now\",\r\n    onSuccess: (e) => insertItems(),\r\n\r\n    onClose: () => console.log(\"Wait! Don't leave :(\"),\r\n  };\r\n  return (\r\n    <div>\r\n      <PaystackButton {...componentProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currentUser: state.user.currentUser,\r\n});\r\n\r\nexport default connect(mapStateToProps)(PaystackBtn);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  clearItemFromCart,\r\n  addItem,\r\n  removeItem,\r\n} from \"../../redux/cart/cart.action\";\r\nimport \"./checkout.style.scss\";\r\n\r\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n \r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  return (\r\n    <tr>\r\n      <td className=\"image__container\">\r\n        {\" \"}\r\n        <img src={imageUrl} alt=\"item\" className=\"img-fluid\" width=\"100\" />\r\n      </td>\r\n      <td className=\"name\">{name}</td>\r\n      <td className=\"quantity\">\r\n        <span className=\"arrow\" onClick={() => removeItem(cartItem)}>\r\n          &#10094;\r\n        </span>\r\n        <span className=\"value\">{quantity}</span>\r\n        <span className=\"arrow\" onClick={() => addItem(cartItem)}>\r\n          &#10095;\r\n        </span>\r\n      </td>\r\n      <td className=\"price\">{price}</td>\r\n      <td\r\n        id=\"remove\"\r\n        className=\"remove__button\"\r\n        onClick={() => clearItem(cartItem)}\r\n      >\r\n        &#10006;\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  clearItem: (item) => dispatch(clearItemFromCart(item)),\r\n  addItem: (item) => dispatch(addItem(item)),\r\n  removeItem: (item) => dispatch(removeItem(item)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./checkout.style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal,\r\n} from \"../../redux/cart/cart.selectors\";\r\nimport { selectCurrentUser } from \"../../redux/user/user.selectors\";\r\nimport PaystackBtn from \"../../components/paystack-button/paystack-button.component\";\r\nimport CheckOut from \"../../components/checkout-item/CheckOut.component\";\r\n\r\nimport firebase from \"../../components/firebase/firebase.utils\";\r\nconst CheckoutPage = ({ cartItems, total, history, user }) => {\r\n  const insertItems = () => {\r\n    console.log(\"inserting\");\r\n    const db = firebase.firestore();\r\n\r\n    db.collection(\"users\").doc(user.id).collection(\"cartItems\").add({\r\n      items: cartItems,\r\n      amount: total,\r\n      createdAt: new Date(),\r\n    });\r\n    history.push(\"/order\");\r\n  };\r\n\r\n  const successMsg = () => {\r\n    history.push(\"/order\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"checkout__page\">\r\n      <div className=\"checkout__table table-responsive\">\r\n        <table className=\"table\" style={{ textAlign: \"center\" }}>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Product</th>\r\n              <th scope=\"col\">Description</th>\r\n              <th scope=\"col\">Quantity</th>\r\n              <th scope=\"col\">Price</th>\r\n              <th scope=\"col\">Remove</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {cartItems.map((cartItem) => (\r\n              <CheckOut key={cartItem.id} cartItem={cartItem} />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"total__container\">\r\n        <div className=\"total\">\r\n          <span>TOTAL:&#8358;{total}</span>\r\n        </div>\r\n        <div className=\"test__warning\">\r\n          **Please use the following test credit card for payments\r\n          <br />\r\n          4084084084084081 -Exp 01/22 -CVV:408\r\n        </div>\r\n        <div className=\"stripe__btn\">\r\n          <PaystackBtn\r\n            price={total}\r\n            cartItems={cartItems}\r\n            successMsg={successMsg}\r\n            insertItems={insertItems}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal,\r\n  user: selectCurrentUser,\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(CheckoutPage));\r\n"],"sourceRoot":""}
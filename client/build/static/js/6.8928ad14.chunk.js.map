{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/CheckOut.component.jsx","pages/checkout/CheckoutPage.component.jsx"],"names":["StripeCheckoutButton","price","priceForStripe","label","name","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","stripeKey","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","className","src","alt","width","onClick","id","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","style","textAlign","scope","map","key"],"mappings":"wPA2CeA,EAvCc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxBC,EAAyB,IAARD,EAsBvB,OACE,kBAAC,IAAD,CACEE,MAAM,UACNC,KAAK,iBACLC,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBP,EAApB,KACXQ,OAAQP,EACRQ,WAAW,UACXC,MA5BY,SAACA,GACfC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQP,EACRS,WAGDK,MAAK,SAACC,GACLC,MAAM,wBAEPC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZF,MAAM,4CAeRK,UA/BF,iH,QCsCWC,G,OAAAA,YAAQ,MANI,SAACC,GAAD,MAAe,CACxCC,UAAW,SAACC,GAAD,OAAUF,EAASG,YAAkBD,KAChDE,QAAS,SAACF,GAAD,OAAUF,EAASI,YAAQF,KACpCG,WAAY,SAACH,GAAD,OAAUF,EAASK,YAAWH,QAG7BH,EApCM,SAAC,GAAkD,IAAhDO,EAA+C,EAA/CA,SAAUL,EAAqC,EAArCA,UAAWG,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC5C1B,EAAoC2B,EAApC3B,KAAM4B,EAA8BD,EAA9BC,SAAU/B,EAAoB8B,EAApB9B,MAAOgC,EAAaF,EAAbE,SAC/B,OACE,4BACE,wBAAIC,UAAU,oBACX,IACD,yBAAKC,IAAKH,EAAUI,IAAI,OAAOF,UAAU,YAAYG,MAAM,SAE7D,wBAAIH,UAAU,QAAQ9B,GACtB,wBAAI8B,UAAU,YACZ,0BAAMA,UAAU,QAAQI,QAAS,kBAAMR,EAAWC,KAAlD,UAGA,0BAAMG,UAAU,SAASD,GACzB,0BAAMC,UAAU,QAAQI,QAAS,kBAAMT,EAAQE,KAA/C,WAIF,wBAAIG,UAAU,SAASjC,GACvB,wBACEsC,GAAG,SACHL,UAAU,iBACVI,QAAS,kBAAMZ,EAAUK,KAH3B,eCoBAS,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGMrB,sBAAQgB,EAARhB,EAzCM,SAAC,GAAD,IAAGkB,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,yBAAKV,UAAU,kBACb,yBAAKA,UAAU,oCACb,2BAAOA,UAAU,QAAQY,MAAO,CAAEC,UAAW,WAC3C,+BACE,4BACE,wBAAIC,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,YAGJ,+BACGN,EAAUO,KAAI,SAAClB,GAAD,OACb,kBAAC,EAAD,CAAUmB,IAAKnB,EAASQ,GAAIR,SAAUA,UAK9C,yBAAKG,UAAU,oBACb,yBAAKA,UAAU,SACb,wCAAcU,IAEhB,yBAAKV,UAAU,iBAAf,2DAEE,6BAFF,2CAKA,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAsBjC,MAAO2C","file":"static/js/6.8928ad14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport axios from \"axios\";\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  const priceForStripe = price * 100;\r\n  const publishableKey =\r\n    \"pk_test_51H0NPsAM3XQGNiCW0P9gCKUPuqDOYen8kPH02ynIyG94WZxAR9XX6K7r0ys4dDbj0hywdKtMzJnFGzgoGEFc4fqf00g6XUUf09\";\r\n\r\n  const onToken = (token) => {\r\n    axios({\r\n      url: \"payment\",\r\n      method: \"post\",\r\n      data: {\r\n        amount: priceForStripe,\r\n        token,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        alert(\"payment succesful\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"There was an issue with your payment\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label=\"pay now\"\r\n      name=\"crown clothing\"\r\n      billingAddress\r\n      shippingAddress\r\n      image=\"https://svgshare.com/i/CUz.svg\"\r\n      description={`Your total is $${price} `}\r\n      amount={priceForStripe}\r\n      panelLabel=\"Pay Now\"\r\n      token={onToken}\r\n      stripeKey={publishableKey}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutButton;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  clearItemFromCart,\r\n  addItem,\r\n  removeItem,\r\n} from \"../../redux/cart/cart.action\";\r\nimport \"./checkout.style.scss\";\r\n\r\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  return (\r\n    <tr>\r\n      <td className=\"image__container\">\r\n        {\" \"}\r\n        <img src={imageUrl} alt=\"item\" className=\"img-fluid\" width=\"100\" />\r\n      </td>\r\n      <td className=\"name\">{name}</td>\r\n      <td className=\"quantity\">\r\n        <span className=\"arrow\" onClick={() => removeItem(cartItem)}>\r\n          &#10094;\r\n        </span>\r\n        <span className=\"value\">{quantity}</span>\r\n        <span className=\"arrow\" onClick={() => addItem(cartItem)}>\r\n          &#10095;\r\n        </span>\r\n      </td>\r\n      <td className=\"price\">{price}</td>\r\n      <td\r\n        id=\"remove\"\r\n        className=\"remove__button\"\r\n        onClick={() => clearItem(cartItem)}\r\n      >\r\n        &#10006;\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  clearItem: (item) => dispatch(clearItemFromCart(item)),\r\n  addItem: (item) => dispatch(addItem(item)),\r\n  removeItem: (item) => dispatch(removeItem(item)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CheckoutItem);\r\n","import React from \"react\";\r\n\r\nimport \"./checkout.style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal,\r\n} from \"../../redux/cart/cart.selectors\";\r\nimport StripeCheckoutButton from \"../../components/stripe-button/stripe-button.component\";\r\nimport CheckOut from \"../../components/checkout-item/CheckOut.component\";\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => (\r\n  <div className=\"checkout__page\">\r\n    <div className=\"checkout__table table-responsive\">\r\n      <table className=\"table\" style={{ textAlign: \"center\" }}>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Product</th>\r\n            <th scope=\"col\">Description</th>\r\n            <th scope=\"col\">Quantity</th>\r\n            <th scope=\"col\">Price</th>\r\n            <th scope=\"col\">Remove</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {cartItems.map((cartItem) => (\r\n            <CheckOut key={cartItem.id} cartItem={cartItem} />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <div className=\"total__container\">\r\n      <div className=\"total\">\r\n        <span>TOTAL:${total}</span>\r\n      </div>\r\n      <div className=\"test__warning\">\r\n        **Please use the following test credit card for payments\r\n        <br />\r\n        4242 4242 4242 4242 -Exp 09/20 -CVV:123\r\n      </div>\r\n      <div className=\"stripe__btn\">\r\n        <StripeCheckoutButton price={total} />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  total: selectCartTotal,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);\r\n"],"sourceRoot":""}